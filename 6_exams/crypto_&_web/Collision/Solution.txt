Notiamo che l’algoritmo è composto da:
	Una funzione di XOR che setta un seme casuale e che esegue la xor tra l’x-esimo carattere del testo e un numero casuale tra 0 e 10
	Una funzione di hash con valore fisso 123, in cui z=x e finché z≥ y allora sottrae y da z
	Una funzione di crittazione che prende l’anno della data attuale e usa la funzione di hash nello xor del testo e l’anno corrente, crittando correttamente
	Una funzione di decrittazione, che considera che se si ha un seme <= 10000, lancia un’eccezione, altrimenti esegue lo XOR tra test e hash basata sul seme

Si può notare che, chiamando la funzione decrypt con un valore di seme che contiene un pezzo uguale tra
y="valore" e seed, si ottiene sempre la stringa: \UUE[U\@SC6}bgwh^ohcfhujkl|27:0s5p
Questo in effetti è il nome dell’esercizio, quindi collisione (inserendo lo stesso numero nella stessa posizione, lo si deve spostare).
Cambiando la funzione di XOR inserendo seed si ottiene lo stesso testo; infatti, la funzione h è una funzione di modulo, dato che non fa altro che verificare il resto e, quando a 0, ritorna la stessa stringa.
Si può notare che l’algoritmo, inserendo come numero 10016 nella chiamata decrypt ritorna la flag corretta, cioè:
SPRITZ_CTF={hash_collisions0713u5}
